cmake_minimum_required(VERSION 3.2)

set (FLAG "-O3 -std=c++20")

add_subdirectory(benchmark)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/benchmark/include)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/benchmarks)

set (Ds 1 2 4 8)
set (Hs 1 2 4 8 16 32 64 128)
set (Ns 100000 1000000 10000000)
set (Cs 1 2 4 8)

set(DH_TESTS encoding decoding)
foreach(TEST ${DH_TESTS})
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/benchmarks/${TEST})
  foreach(D ${Ds})
    foreach(H ${Hs})
      configure_file(${TEST}.cpp ${TEST}${D}_${H}.cpp)
      add_executable(${TEST}_${D}_${H} ${TEST}${D}_${H}.cpp)
      target_compile_options(${TEST}_${D}_${H} PRIVATE -march=native ${FLAG})
      target_link_libraries(${TEST}_${D}_${H} -lpthread ${CMAKE_CURRENT_BINARY_DIR}/benchmark/src/libbenchmark.a)
      add_test(NAME ${TEST}_${D}_${H} COMMAND ${TEST}_${D}_${H} --benchmark_out=benchmarks/${TEST}/${TEST}_${D}_${H}.json --benchmark_out_format=json)
      add_dependencies(${TEST}_${D}_${H} benchmark)
    endforeach()
  endforeach()
endforeach()

set(DHN_TESTS insert remove point_query)
foreach(TEST ${DHN_TESTS})
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/benchmarks/${TEST})
  foreach(D ${Ds})
    foreach(H ${Hs})
      foreach(N ${Ns})
        configure_file(${TEST}.cpp ${TEST}${D}_${H}_${N}.cpp)
        add_executable(${TEST}_${D}_${H}_${N} ${TEST}${D}_${H}_${N}.cpp)
        target_compile_options(${TEST}_${D}_${H}_${N} PRIVATE -march=native ${FLAG})
        target_link_libraries(${TEST}_${D}_${H}_${N} -lpthread ${CMAKE_CURRENT_BINARY_DIR}/benchmark/src/libbenchmark.a)
        add_test(NAME ${TEST}_${D}_${H}_${N} COMMAND ${TEST}_${D}_${H}_${N} --benchmark_out=benchmarks/${TEST}/${TEST}_${D}_${H}_${N}.json --benchmark_out_format=json)
        add_dependencies(${TEST}_${D}_${H}_${N} benchmark)
      endforeach()
    endforeach()
  endforeach()
endforeach()

set(DHNC_TESTS insert_parallel remove_parallel)
foreach(TEST ${DHNC_TESTS})
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/benchmarks/${TEST})
  foreach(D ${Ds})
    foreach(H ${Hs})
      foreach(N ${Ns})
        foreach(C ${Cs})
          configure_file(${TEST}.cpp ${TEST}${D}_${H}_${N}_${C}.cpp)
          add_executable(${TEST}_${D}_${H}_${N}_${C} ${TEST}${D}_${H}_${N}_${C}.cpp)
          target_compile_options(${TEST}_${D}_${H}_${N}_${C} PRIVATE -march=native ${FLAG})
          target_link_libraries(${TEST}_${D}_${H}_${N}_${C} -lpthread ${CMAKE_CURRENT_BINARY_DIR}/benchmark/src/libbenchmark.a)
          add_test(NAME ${TEST}_${D}_${H}_${N}_${C} COMMAND ${TEST}_${D}_${H}_${N}_${C} --benchmark_out=benchmarks/${TEST}/${TEST}_${D}_${H}_${N}_${C}.json --benchmark_out_format=json)
          add_dependencies(${TEST}_${D}_${H}_${N}_${C} benchmark)
        endforeach()
      endforeach()
    endforeach()
  endforeach()
endforeach()

set (DHN_TESTS_HEAVY knn_query rect_query rect_intersect)
foreach(TEST ${DHN_TESTS_HEAVY})
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/benchmarks/${TEST})
  foreach(D ${Ds})
    foreach(H ${Hs})
      foreach(N ${Ns})
        configure_file(${TEST}.cpp ${TEST}${D}_${H}_${N}.cpp)
        add_executable(${TEST}_${D}_${H}_${N} ${TEST}${D}_${H}_${N}.cpp)
        target_compile_options(${TEST}_${D}_${H}_${N} PRIVATE -march=native ${FLAG}) #large N during rect_intersect causes stack-overflow, to fix use -fsplit-stack (fixed?)
        target_link_libraries(${TEST}_${D}_${H}_${N} -lpthread ${CMAKE_CURRENT_BINARY_DIR}/benchmark/src/libbenchmark.a)
        add_test(NAME ${TEST}_${D}_${H}_${N} COMMAND ${TEST}_${D}_${H}_${N} --benchmark_out=benchmarks/${TEST}/${TEST}_${D}_${H}_${N}.json --benchmark_out_format=json --benchmark_min_time=300x)
        add_dependencies(${TEST}_${D}_${H}_${N} benchmark)
      endforeach()
    endforeach()
  endforeach()
endforeach()
